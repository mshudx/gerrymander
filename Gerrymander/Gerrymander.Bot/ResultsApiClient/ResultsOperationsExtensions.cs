// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Gerrymander.ResulstApi;
using Gerrymander.ResulstApi.Models;
using Microsoft.Rest;

namespace Gerrymander.ResulstApi
{
    public static partial class ResultsOperationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the Gerrymander.ResulstApi.IResultsOperations.
        /// </param>
        public static Results Get(this IResultsOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IResultsOperations)s).GetAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Gerrymander.ResulstApi.IResultsOperations.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Results> GetAsync(this IResultsOperations operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Gerrymander.ResulstApi.Models.Results> result = await operations.GetWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Gerrymander.ResulstApi.IResultsOperations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static ResultsByCandidate GetByCandidate(this IResultsOperations operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IResultsOperations)s).GetByCandidateAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Gerrymander.ResulstApi.IResultsOperations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ResultsByCandidate> GetByCandidateAsync(this IResultsOperations operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Gerrymander.ResulstApi.Models.ResultsByCandidate> result = await operations.GetByCandidateWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Gerrymander.ResulstApi.IResultsOperations.
        /// </param>
        public static IList<ResultsByCandidate> GetByCandidates(this IResultsOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IResultsOperations)s).GetByCandidatesAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Gerrymander.ResulstApi.IResultsOperations.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<ResultsByCandidate>> GetByCandidatesAsync(this IResultsOperations operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Gerrymander.ResulstApi.Models.ResultsByCandidate>> result = await operations.GetByCandidatesWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Gerrymander.ResulstApi.IResultsOperations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static ResultsByDistrict GetByDistrict(this IResultsOperations operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IResultsOperations)s).GetByDistrictAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Gerrymander.ResulstApi.IResultsOperations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ResultsByDistrict> GetByDistrictAsync(this IResultsOperations operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Gerrymander.ResulstApi.Models.ResultsByDistrict> result = await operations.GetByDistrictWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Gerrymander.ResulstApi.IResultsOperations.
        /// </param>
        public static IList<ResultsByDistrict> GetByDistricts(this IResultsOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IResultsOperations)s).GetByDistrictsAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Gerrymander.ResulstApi.IResultsOperations.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<ResultsByDistrict>> GetByDistrictsAsync(this IResultsOperations operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Gerrymander.ResulstApi.Models.ResultsByDistrict>> result = await operations.GetByDistrictsWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Gerrymander.ResulstApi.IResultsOperations.
        /// </param>
        public static IList<ResultsByParty> GetByParties(this IResultsOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IResultsOperations)s).GetByPartiesAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Gerrymander.ResulstApi.IResultsOperations.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<ResultsByParty>> GetByPartiesAsync(this IResultsOperations operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Gerrymander.ResulstApi.Models.ResultsByParty>> result = await operations.GetByPartiesWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Gerrymander.ResulstApi.IResultsOperations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static ResultsByParty GetByParty(this IResultsOperations operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IResultsOperations)s).GetByPartyAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Gerrymander.ResulstApi.IResultsOperations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ResultsByParty> GetByPartyAsync(this IResultsOperations operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Gerrymander.ResulstApi.Models.ResultsByParty> result = await operations.GetByPartyWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Gerrymander.ResulstApi.IResultsOperations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static ResultsBySite GetBySite(this IResultsOperations operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IResultsOperations)s).GetBySiteAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Gerrymander.ResulstApi.IResultsOperations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<ResultsBySite> GetBySiteAsync(this IResultsOperations operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Gerrymander.ResulstApi.Models.ResultsBySite> result = await operations.GetBySiteWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Gerrymander.ResulstApi.IResultsOperations.
        /// </param>
        public static IList<ResultsBySite> GetBySites(this IResultsOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IResultsOperations)s).GetBySitesAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Gerrymander.ResulstApi.IResultsOperations.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<ResultsBySite>> GetBySitesAsync(this IResultsOperations operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Gerrymander.ResulstApi.Models.ResultsBySite>> result = await operations.GetBySitesWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
